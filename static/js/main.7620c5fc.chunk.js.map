{"version":3,"sources":["assets/4.png","assets/Колян.png","store/navbar/navbar.actions.js","store/navbar/navbar.reducers.js","store/navbar/index.js","shared/constants/index.js","shared/http/httpClient.js","shared/http/ApiService.js","store/board/board.actions.js","store/board/board.reducer.js","store/board/index.js","store/chart/chart.actions.js","store/chart/chart.reducer.js","store/chart/index.js","store/users/users.actions.js","store/users/users.reducer.js","store/users/index.js","store/reducers.js","store/middlewares.js","store/index.js","pages/Tasks/components/Task/Task.jsx","pages/Tasks/components/TasksList/TasksList.jsx","pages/Tasks/components/FormTask/FormTask.jsx","pages/Users/components/User/User.jsx","pages/NotFound/NotFound.jsx","routing/routes.js","pages/Tasks/Tasks.jsx","pages/Users/Users.jsx","pages/Rating/Rating.jsx","core/components/SideMenu/SideMenu.jsx","core/components/Navbar/Navbar.jsx","core/components/PushButton/PushButton.jsx","routing/RouterRoulet.jsx","App.js","serviceWorker.js","index.js","assets/Заяц.png"],"names":["module","exports","NAVBAR_ACTION_TYPES","NavbarActions","setTitle","createAction","mapReducers","state","action","title","payload","navbarState","reducer","handleActions","actions","URLS","API_URLS","BASE","BOARD","TASK_CHANGE","USERS","CLICKS","TASK_CREATE","SEND_MESSAGE","LOAD_STATUSES","TASK_STATUSES","httpClient","axios","create","headers","baseURL","ApiService","getBoard","get","changeTask","task","post","getUsers","getClicks","count","url","replace","toString","createTask","data","sendMessage","BOARD_ACTION_TYPES","BoardActions","setStatus","changeStatusTask","setTasks","setSignalFetch","fetchTasks","withLoadStatus","dispatch","a","response","curveSocketTimer","setTimeout","clearTimeout","console","log","initialState","tasks","loadStatus","signal","boardState","CHART_ACTION_TYPES","ChartActions","setData","setSignal","fetchChartData","mapReducer","uniqueByHash","Set","map","dot","hash","updateDataArray","uniqueArr","filter","push","readyObjects","arr","obj","label","reverse","i","prepareData","chartReducer","chartState","USERS_ACTION_TYPES","UsersActions","setUsers","fetchUsers","users","usersState","reducers","combineReducers","navbar","board","chart","middlewares","composeWithDevTools","applyMiddleware","getState","next","Function","store","createStore","Task","props","useDispatch","classes","cn","status","className","description","onClick","type","btnNextStatusText","danger","icon","DeleteOutlined","TasksList","statusId","onCreateTask","statusText","currentTasks","size","PlusSquareOutlined","length","key","FormTask","useState","creatingTask","setCreatingTask","onClose","Form","useForm","taskForm","event","stopPropagation","form","onFinish","values","taskData","resetFields","Item","name","placeholder","Option","value","TextArea","htmlType","loading","User","secondName","src","avatarPng","alt","NotFound","showKolyan","setShowKolyan","useEffect","timerKolyan","classesKolyan","Kolyan","routes","path","component","currentStatus","setCurrentStatus","showCreateForm","setShowCreateForm","useSelector","handleOpenForm","user","axes","primary","position","tooltip","MenuItem","route","active","history","useHistory","SideMenu","filtredRoutes","pathname","useLocation","Navbar","PushButton","hovered","setHovered","content","setContent","onMouseEnter","onMouseLeave","rabbitPng","RouterRoulet","to","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7620c5fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/4.cd3dee1f.png\";","module.exports = __webpack_public_path__ + \"static/media/Колян.9cc251b1.png\";","import { createAction } from \"redux-actions\";\n\nexport const NAVBAR_ACTION_TYPES = {\n    SET_TITLE: \"NAVBAR.SET_TITLE\"\n}\n\nexport class NavbarActions {\n    static setTitle = createAction(NAVBAR_ACTION_TYPES.SET_TITLE);\n}","import { handleActions } from \"redux-actions\";\nimport { NAVBAR_ACTION_TYPES } from \"./navbar.actions\";\n\nexport const initrialState = {\n    title: ''\n}\n\nconst mapReducers = {\n    [NAVBAR_ACTION_TYPES.SET_TITLE]: (state, action) => ({\n        ...state,\n        title: action.payload\n    })\n}\n\nexport const navbarReducer = handleActions(mapReducers, initrialState);","import { NavbarActions } from \"./navbar.actions\";\nimport { navbarReducer } from \"./navbar.reducers\";\n\nexport const navbarState = {\n    reducer: navbarReducer,\n    actions: NavbarActions\n}","export const URLS = {\n    RATING: '/rating',\n    TASKS: '/tasks',\n    USERS_LIST: '/users_list'\n}\n\nexport const API_URLS = {\n    BASE: 'https://galley-jr6l7s7e6a-uc.a.run.app',\n    BOARD: '/board',\n    TASK_CHANGE: '/task/change',\n    USERS: '/users',\n    CLICKS: '/clicks/:count',\n    TASK_CREATE: '/task/create',\n    SEND_MESSAGE: '/push/send'\n}\n\nexport const LOAD_STATUSES = {\n    LOADING: 'LOADING',\n    READY: 'READY'\n}\n\nexport const TASK_STATUSES = [\n    \"Готова для разработки\",\n    \"В разработке\",\n    \"Тестирование\",\n    \"Разработка завершена\"\n]\n\nexport const DELAY_BOARD = 5000;\nexport const DELAY_CHART = 2000;","import axios from \"axios\";\nimport { API_URLS } from \"../constants\";\n\nconst headers = {\n    'Content-Type': 'application/json'\n}\n\nexport const httpClient = axios.create({\n    headers,\n    baseURL: API_URLS.BASE\n})","import { httpClient } from \"./httpClient\";\nimport { API_URLS, URLS } from \"../constants\";\n\nexport class ApiService {\n    \n    /** Получение доски с тасками */\n    static getBoard = () => {\n        return httpClient.get(API_URLS.BOARD);\n    }\n\n    /** Изменение задачи */\n    static changeTask = (task) => {\n        return httpClient.post(API_URLS.TASK_CHANGE, task);\n    }\n\n    /** Получение гребцов */\n    static getUsers = () => {\n        return httpClient.get(API_URLS.USERS);\n    }\n\n    /** Получить количество кликов для граффиков */\n    static getClicks = (count) => {\n        const url = API_URLS.CLICKS.replace(':count', count.toString());\n        return httpClient.get(url);\n    }\n\n    /** Создание задачи */\n    static createTask = (data) => {\n        return httpClient.post(API_URLS.TASK_CREATE, data);\n    }\n\n    /** Уведомление */\n    static sendMessage = () => {\n        return httpClient.post(API_URLS.SEND_MESSAGE);\n    }\n} ","import { createAction } from \"redux-actions\";\n\nimport { LOAD_STATUSES, DELAY_BOARD } from \"../../shared/constants\";\nimport { ApiService } from \"../../shared/http\";\n\nexport const BOARD_ACTION_TYPES = {\n    SET_STATUS: 'BOARD.SET_STATUS',\n    CHANGE_TASK_STATUS: 'BOARD.CHANGE_TASK_STATUS',\n    SET_TASKS: 'BOARD.SET_TASKS',\n    SET_SIGNAL_FETCH: 'BOARD.SET_SIGNAL_FETCH'\n}\n\nexport class BoardActions {\n    static setStatus = createAction(BOARD_ACTION_TYPES.SET_STATUS);\n    static changeStatusTask = createAction(BOARD_ACTION_TYPES.CHANGE_TASK_STATUS);\n    static setTasks = createAction(BOARD_ACTION_TYPES.SET_TASKS);\n\n    // Необходиом для реализации кривосокета (curve-socket)\n    // На этот параметр будет смотреть компонента \n    // и делать \n    static setSignalFetch = createAction(BOARD_ACTION_TYPES.SET_SIGNAL_FETCH);\n\n    static fetchTasks = (withLoadStatus) => async (dispatch) => {\n        if (withLoadStatus) {\n            dispatch(this.setStatus(LOAD_STATUSES.LOADING));\n        }\n\n        try {\n            const response = await ApiService.getBoard();\n            dispatch(this.setTasks(response.data));\n\n            // Реализация Curve-Socket\n            const curveSocketTimer = setTimeout(() => {\n                dispatch(this.setSignalFetch(true));\n                clearTimeout(curveSocketTimer);\n            }, DELAY_BOARD)\n\n        } catch(error) {\n            // TODO: Доработать обработчик\n            console.log(error);\n        }\n    }\n}","import { handleActions } from \"redux-actions\";\n\nimport { LOAD_STATUSES } from \"../../shared/constants\";\nimport { BOARD_ACTION_TYPES } from \"./board.actions\";\n\nconst initialState = {\n    tasks: [],\n    loadStatus: LOAD_STATUSES.READY,\n    signal: false\n}\n\nconst mapReducers = {\n    [BOARD_ACTION_TYPES.SET_TASKS]: (state, action) => ({\n        ...state,\n        tasks: [...action.payload]\n    }),\n    [BOARD_ACTION_TYPES.SET_STATUS]: (state, action) => ({\n        ...state,\n        loadStatus: action.payload\n    }),\n    [BOARD_ACTION_TYPES.SET_SIGNAL_FETCH]: (state, action) => ({\n        ...state,\n        signal: action.payload\n    }),\n    [BOARD_ACTION_TYPES.CHANGE_TASK_STATUS]: (state, action) => {\n        // TODO: тут необходиом реализовать перемещение таски\n        return {\n            ...state\n        }\n    }\n}\n\nexport const boardReducer = handleActions(mapReducers, initialState);","import { BoardActions } from \"./board.actions\";\nimport { boardReducer } from \"./board.reducer\";\n\nexport const boardState = {\n    reducer: boardReducer,\n    actions: BoardActions\n}","import { createAction } from \"redux-actions\";\nimport { ApiService } from \"../../shared/http\";\nimport { DELAY_CHART } from \"../../shared/constants\";\n\nexport const CHART_ACTION_TYPES = {\n    SET_DATA: 'CHART.SET_DATA',\n    SET_SIGNAL: 'CHART.SET_SIGNAL'\n}\n\nexport class ChartActions {\n    static setData = createAction(CHART_ACTION_TYPES.SET_DATA);\n    static setSignal = createAction(CHART_ACTION_TYPES.SET_SIGNAL);\n\n    static fetchChartData = (count) => async (dispatch) => {\n        try {\n            const response = await ApiService.getClicks(count);\n            dispatch(this.setData(response.data));\n            setTimeout(() => {\n                dispatch(this.setSignal(true));\n            }, DELAY_CHART);\n        } catch(error) {\n            console.log(error);\n        }\n    }\n}","import { handleActions } from \"redux-actions\";\nimport { CHART_ACTION_TYPES } from \"./chart.actions\";\n\nconst initialState = {\n    data: [],\n    signal: false\n}\n\nconst prepareData = (data) => {\n    const uniqueByHash = [...new Set(data.map((dot) => dot.hash))];\n    const updateDataArray = [];\n\n    uniqueByHash.map((hash) => {\n        // Создаем массив уникальных массивов\n        const uniqueArr = data.filter((dot) => dot.hash === hash);\n        updateDataArray.push(uniqueArr);\n    })\n\n    const readyObjects = [];\n\n    updateDataArray.map((arr) => {\n        const obj = {\n            label: arr[0].hash,\n            data: []\n        }\n\n        arr.reverse().map((dot, i) => {\n            obj.data.push([i, dot.count])\n        });\n\n        readyObjects.push(obj);\n    })\n\n    return readyObjects;\n}\n\nconst mapReducer = {\n    [CHART_ACTION_TYPES.SET_DATA]: (state, action) => {\n        const data = prepareData(action.payload);\n\n        return {\n            ...state,\n            data: data.reverse()\n        }\n    },\n\n    [CHART_ACTION_TYPES.SET_SIGNAL]: (state, action) => ({\n        ...state,\n        signal: action.payload\n    })\n}\n\nexport const chartReducer = handleActions(mapReducer, initialState);\n\n","import { ChartActions } from \"./chart.actions\";\nimport { chartReducer } from \"./chart.reducer\";\n\nexport const chartState = {\n    actions: ChartActions,\n    reducer: chartReducer\n}","import { createAction } from \"redux-actions\";\nimport { ApiService } from \"../../shared/http\";\n\nexport const USERS_ACTION_TYPES = {\n    SET_USERS: 'USERS.SET_USERS'\n}\n\nexport class UsersActions {\n    static setUsers = createAction(USERS_ACTION_TYPES.SET_USERS);\n\n    static fetchUsers = () => async (dispatch) => {\n        try {   \n            const response = await ApiService.getUsers();\n            dispatch(this.setUsers(response.data));\n        } catch(error) {\n            console.log(error);\n        }\n    }\n}","import { handleActions } from \"redux-actions\";\nimport { USERS_ACTION_TYPES } from \"./users.actions\";\n\nconst initialState = {\n    users: []\n}\n\nconst mapReducers = {\n    [USERS_ACTION_TYPES.SET_USERS]: (state, action) => ({\n        ...state,\n        users: [...action.payload]\n    })\n}\n\nexport const usersReducer = handleActions(mapReducers, initialState);","import { UsersActions } from \"./users.actions\";\nimport { usersReducer } from \"./users.reducer\";\n\nexport const usersState = {\n    reducer: usersReducer,\n    actions: UsersActions\n}","import { combineReducers } from \"redux\";\n\nimport { navbarState } from \"./navbar\";\nimport { boardState } from \"./board\";\nimport { chartState } from \"./chart\";\nimport { usersState } from \"./users\";\n\nexport const reducers = combineReducers({\n    navbar: navbarState.reducer,\n    board: boardState.reducer,\n    chart: chartState.reducer,\n    users: usersState.reducer\n})","import { applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Thunk function\nexport const actionFn = ({ dispatch, getState }) => (next) => (action) => {\n  return action instanceof Function ? action(dispatch, getState) : next(action);\n};\n\nexport const middlewares = composeWithDevTools(applyMiddleware(actionFn));\n","import { createStore } from \"redux\";\n\nimport { reducers } from \"./reducers\";\nimport { middlewares } from \"./middlewares\";\n\nexport const store = createStore(reducers, middlewares);","import React from \"react\";\nimport cn from \"classnames\";\nimport { useDispatch } from \"react-redux\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\n\nimport { Button } from \"antd\";\nimport { ApiService } from \"../../../../shared/http\";\nimport { BoardActions } from \"../../../../store/board/board.actions\";\n\nimport \"./style.scss\";\n\nexport const Task = (props) => {\n    const { task } = props;\n    const dispatch = useDispatch();\n\n    const classes = cn({\n        'task': true,\n    })\n\n    const btnNextStatusText = () => {\n        switch(task.status) {\n            case 0:\n                return \"В разработку\"\n            case 1:\n                return \"В тестрирование\"\n            case 2:\n                return \"Завершить\"\n        }\n    }\n\n    const changeTask = async (status) => {\n        try {\n            await ApiService.changeTask({\n                ...task,\n                status: status\n            })\n\n            dispatch(BoardActions.fetchTasks());\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    \n    const handleClickNext = () => {\n        changeTask(task.status + 1);\n    }\n\n    const handleClickRemove = () => {\n        changeTask(4);\n    }\n\n    return (\n        <div className={classes}>\n            <h3 className=\"task-title\">Тема: {task.title}</h3>\n            <p className=\"task-description\">\n                Описание: <br/>{task.description}\n            </p>\n            <div className=\"controls\">\n                <Button \n                    onClick={handleClickNext}\n                    type=\"dashed\"\n                >\n                    {btnNextStatusText()}\n                </Button>\n                <Button \n                    danger\n                    type=\"dashed\"\n                    icon={<DeleteOutlined />} \n                    onClick={handleClickRemove}\n                />\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport { Empty } from \"antd\";\nimport { Button } from \"antd\";\nimport { PlusSquareOutlined } from \"@ant-design/icons\";\n\nimport \"./style.scss\";\nimport { TASK_STATUSES } from \"../../../../shared/constants\";\nimport { Task } from \"../Task\";\n\nexport const TasksList = (props) => {\n    const { statusId, tasks, onCreateTask } = props;\n    const statusText = TASK_STATUSES[statusId];\n    const currentTasks = tasks.filter((task) => task.status === statusId);\n    \n    const handleClickCreateTask = () => {\n        // В onCreateTask передаём id статуса чтобы было понятно \n        // с каким статутом создавать таску\n        !!onCreateTask && onCreateTask(statusId);\n    }\n\n    const renderTasks = () => {\n        if (!!currentTasks && !!currentTasks.length) {\n            return (\n                <>\n                    {\n                        currentTasks.map((task, i) => \n                            <Task key={i} task={task} />\n                        )\n                    }\n                </>\n            )\n        }\n\n        return <Empty description={`Нет задач в статусе \"${statusText}\"`}/>\n    }\n\n    return (\n        <div className=\"tasks-list\">\n            <h3 className=\"tasks-list-title\">{statusText}</h3>\n            <div className=\"tasks\">\n                <div className=\"controls\">\n                    <Button\n                        size=\"small\"\n                        icon={<PlusSquareOutlined />}\n                        onClick={handleClickCreateTask}\n                    ></Button>\n                </div>\n                {renderTasks()}\n            </div>\n        </div>\n    )\n}","import React, { useState } from \"react\";\nimport { Form, Input, Select, Button } from \"antd\";\n\nimport \"./style.scss\";\nimport { ApiService } from \"../../../../shared/http\";\n\nexport const FormTask = (props) => {\n    const [creatingTask, setCreatingTask] = useState(false);\n    const { status, onClose } = props;\n    const [taskForm] = Form.useForm();\n    \n    const createTask = async (data) => {\n        try {\n            setCreatingTask(true);\n            await ApiService.createTask(data);\n            !!onClose && onClose();\n        } catch(error) {\n            console.log(error);\n        } finally {\n            setCreatingTask(false);\n        }\n    }\n\n    const handleSubmit = (values) => {\n        const taskData = { ...values, status };\n\n        if (!!taskData.title.length) {\n            createTask(taskData);\n        }\n\n        taskForm.resetFields();\n    }\n\n    const handleClose = (event) => {\n        event.stopPropagation();\n        !!onClose && onClose();\n    }\n\n    return (\n        <div className=\"backdrop\" onClick={handleClose}>\n            <div className=\"form-task\" onClick={(event) => event.stopPropagation()}>\n                <Form  form={taskForm} onFinish={handleSubmit}>\n                    <Form.Item name=\"title\">\n                        <Input placeholder=\"Название\" />\n                    </Form.Item>\n                    <Form.Item name=\"urgency\">\n                        <Select placeholder=\"Срочность\">\n                            <Select.Option value={0}>Не срочно</Select.Option>\n                            <Select.Option value={1}>Срочно</Select.Option>\n                            <Select.Option value={2}>Очень срочно</Select.Option>\n                        </Select>\n                    </Form.Item>\n                    <Form.Item name=\"description\">\n                        <Input.TextArea placeholder=\"Описание...\" />\n                    </Form.Item>\n                    <Form.Item>\n                        <Button \n                            htmlType=\"submit\" \n                            loading={creatingTask}\n                        >Создать</Button>\n                    </Form.Item>\n                </Form>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\n\nimport \"./style.scss\";\nimport avatarPng from \"../../../../assets/4.png\";\n\nexport const User = (props) => {\n    const { name, secondName } = props;\n\n    return (\n        <div className=\"user\">\n            <div className=\"avatar\">\n                <img src={avatarPng} alt=\"avatar\"/>\n            </div>\n            <div className=\"info\">\n                <h3>{name}</h3>\n                <h3>{secondName}</h3>\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport cn from \"classnames\";\n\nimport \"./style.scss\";\nimport { NavbarActions } from \"../../store/navbar/navbar.actions\";\nimport Kolyan from \"../../assets/Колян.png\";\n\nexport const NotFound = () => {\n    const [showKolyan, setShowKolyan] = useState(false);\n    const dispatch = useDispatch();\n    \n    useEffect(() => {\n        dispatch(NavbarActions.setTitle('404 Пууустооо...'))\n        const timerKolyan = setTimeout(() => {\n            setShowKolyan(true);\n        }, 100);\n\n        return () => {\n            clearTimeout(timerKolyan);\n        }\n    }, []);\n\n    const classesKolyan = cn({\n        'kolyan': true,\n        'kolyan-show': showKolyan\n    })\n\n    return (\n        <div className=\"not-found\">\n            <h1>\n                Ты куда своим пальцем тычешь?\n            </h1>\n            <img \n                className={classesKolyan} \n                src={Kolyan} \n                alt=\"kolyan\"\n            />\n        </div>\n    )\n}","import { URLS } from \"../shared/constants\";\nimport { Rating, Tasks, Users } from \"../pages\";\n\nexport const routes = [\n    {\n        path: URLS.TASKS, \n        name: 'Доска с карточками',\n        component: Tasks\n    },\n    {\n        path: URLS.USERS_LIST, \n        name: 'Состав галеры',\n        component: Users\n    },\n    { \n        path: URLS.RATING,\n        name: \"Показатели гребли\",\n        component: Rating,\n    }\n]","import React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./style.scss\";\nimport { LOAD_STATUSES } from \"../../shared/constants\";\nimport { NavbarActions } from \"../../store/navbar/navbar.actions\";\nimport { BoardActions } from \"../../store/board/board.actions\";\nimport { TasksList, FormTask } from \"./components\"\n\nexport const Tasks = () => {\n    const [currentStatus, setCurrentStatus] = useState(0);\n    const [showCreateForm, setShowCreateForm] = useState(false);\n\n    const dispatch = useDispatch();\n    const { tasks, loadStatus, signal } = useSelector((state) => state.board);\n\n    useEffect(() => {\n        dispatch(NavbarActions.setTitle('Доска с карточками'));\n        dispatch(BoardActions.fetchTasks(true));\n    }, []);\n    \n    useEffect(() => {\n        if (signal) {\n            dispatch(BoardActions.fetchTasks());\n            dispatch(BoardActions.setSignalFetch(false));\n        }\n    }, [signal]);\n\n    const handleCloseForm = () => {\n        setShowCreateForm(false);\n    }\n\n    const handleOpenForm = (status) => {\n        setCurrentStatus(status)\n        setShowCreateForm(true);\n    }\n\n    return (\n        <div className=\"tasks\">\n            {\n                !!tasks && (\n                    <div className=\"tasks-columns\">\n                        <TasksList statusId={0} tasks={tasks} onCreateTask={handleOpenForm} />\n                        <TasksList statusId={1} tasks={tasks} onCreateTask={handleOpenForm} />\n                        <TasksList statusId={2} tasks={tasks} onCreateTask={handleOpenForm} />\n                        <TasksList statusId={3} tasks={tasks} onCreateTask={handleOpenForm} />\n                    </div>\n                )\n            }\n            {\n                showCreateForm && \n                <FormTask \n                    status={currentStatus}\n                    onClose={handleCloseForm}\n                />}\n        </div>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./style.scss\";\nimport { NavbarActions } from \"../../store/navbar/navbar.actions\";\nimport { UsersActions } from \"../../store/users/users.actions\";\nimport { User } from \"./components\";\n\nexport const Users = () => {\n    const { users } = useSelector((state) => state.users);\n    const dispatch = useDispatch();\n    \n    useEffect(() => {\n        dispatch(NavbarActions.setTitle('Гребцы'));\n        dispatch(UsersActions.fetchUsers());\n    }, []);\n\n    const renderUsers = () => {\n        if (!!users && !!users.length) {\n            return (\n                <div className=\"users-list\">\n                    {\n                        users.map((user, i) => (\n                                <User \n                                    key={i}\n                                    name={user['first_name']} \n                                    secondName={user['second_name']} \n                                />\n                            )\n                        )\n                    }\n                </div>\n            )\n        }\n        return <p>Пока что нет гребцов</p>\n    }\n\n    return (\n        <div className=\"users\">\n             {renderUsers()}\n        </div>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Chart } from \"react-charts\";\n\nimport \"./style.scss\";\nimport { NavbarActions } from \"../../store/navbar/navbar.actions\";\nimport { ChartActions } from \"../../store/chart/chart.actions\";\n\nexport const Rating = () => {\n    const dispatch = useDispatch();\n    const { data, signal } = useSelector((state) => state.chart);\n\n    useEffect(() => {\n        dispatch(NavbarActions.setTitle('Показатель гребли'));\n        dispatch(ChartActions.fetchChartData(100));\n    }, []);\n\n    useEffect(() => {\n        if (signal) {\n            dispatch(ChartActions.fetchChartData(100));\n            dispatch(ChartActions.setSignal(false));\n        }\n    }, [signal])\n\n    const axes = [\n        { primary: true, type: 'linear', position: 'bottom' },\n        { type: 'linear', position: 'left' },\n    ]\n\n    return (\n        <div className=\"rating\">\n           \n            { \n                !!data.length && (\n                    <div className=\"chart-holder\">\n                        <Chart data={data} axes={axes} tooltip />\n                    </div>\n                )\n            }\n        </div>\n    )\n}","import React from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport cn from \"classnames\";\n\nimport \"./style.scss\";\n\nconst MenuItem = (props) => {\n    const { route, active } = props;\n    const history = useHistory();\n\n    const handleClick = () => {\n        history.push(route.path);\n    }\n\n    const classes = cn({\n        'side-menu-item': true,\n        'side-menu-item-active': active\n    })\n\n    return (\n        <div \n            className={classes}\n            onClick={handleClick}\n        >\n            <span>{route.name}</span>\n        </div>\n    )\n}\n\nexport const SideMenu = (props) => {\n    const { routes } = props;\n    const filtredRoutes = routes.filter((route) => !!route.name);\n    const { pathname } = useLocation();\n\n    return (\n        <div className=\"side-menu\">\n            {\n                filtredRoutes.map((route, i) => \n                    <MenuItem \n                        key={i} \n                        route={route}\n                        active={route.path === pathname} \n                    />\n                )\n            }\n        </div>\n    )\n}","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport \"./style.scss\";\n\nexport const Navbar = () => {\n    const { title } = useSelector((state) => state.navbar);\n\n    return (\n        <div className=\"navbar\">\n            <h1>{title}</h1>\n        </div>\n    )\n}","import React, { useState } from \"react\";\nimport cn from \"classnames\";\n\nimport \"./style.scss\";\nimport rabbitPng from \"../../../assets/Заяц.png\";\nimport { ApiService } from \"../../../shared/http\";\n\nexport const PushButton = () => {\n    const [hovered, setHovered] = useState(false);\n    const [content, setContent] = useState('Ускорить грбецов');\n\n    const classes = cn({\n        'push-btn': true,\n        'push-btn-hovered': hovered\n    })\n\n    const handleMouseEnter = () => {\n        setHovered(true);\n    }\n\n    const handleMouseLeave = () => {\n        setHovered(false);\n    }\n\n    const sendMessage = async () => {\n        try {\n            setContent('УСКОРЯЮ...')\n            await ApiService.sendMessage();\n        } catch(error) {\n            console.log(error);\n        } finally {\n            setContent('Ускорить грбецов');\n        }\n    }\n\n    const handleClick = () => {\n        sendMessage();\n    }\n\n    return (\n        <div \n            className={classes}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n        >\n            <div className=\"picture\">\n                <img src={rabbitPng} alt=\"Заяц\"/>\n            </div>\n                <p>{content}</p>\n            <div className=\"picture\">\n                <img src={rabbitPng} alt=\"Заяц\"/>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport { \n    HashRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from \"react-router-dom\";\n\nimport \"./style.scss\";\nimport { URLS } from \"../shared/constants\";\nimport { routes } from \"./routes\";\nimport { NotFound } from \"../pages\";\nimport { SideMenu, Navbar } from \"../core/components\";\n\nexport const RouterRoulet = () => {\n    return (\n        <Router>\n            <div className=\"container\">\n                <div className=\"container-side\">\n                    <SideMenu routes={routes} />\n                </div>\n                <div className=\"container-content\">\n                    <Navbar />\n                    <Route path=\"/\">\n                        <Redirect to={URLS.TASKS} />\n                    </Route>\n                    <Switch>\n                        {\n                            routes.map((route, i) => \n                                <Route \n                                    key={i}\n                                    path={route.path}\n                                    component={route.component}\n                                />\n                            )\n                        }\n                        <NotFound />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    )\n}","import 'antd/dist/antd.css';\n\nimport React from 'react';\nimport { Provider } from \"react-redux\";\n\nimport { store } from \"./store\";\nimport { RouterRoulet } from \"./routing\"\nimport { PushButton } from \"./core/components\";\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <RouterRoulet />\n      </Provider>\n      <PushButton />\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Заяц.5c188ade.png\";"],"sourceRoot":""}