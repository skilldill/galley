{"version":3,"sources":["store/navbar/navbar.actions.js","store/navbar/navbar.reducers.js","store/navbar/index.js","shared/constants/index.js","shared/http/httpClient.js","shared/http/ApiService.js","store/board/board.actions.js","store/board/board.reducer.js","store/board/index.js","store/reducers.js","store/middlewares.js","store/index.js","pages/Tasks/components/Task/Task.jsx","pages/Tasks/components/TasksList/TasksList.jsx","pages/NotFound/NotFound.jsx","routing/routes.js","pages/Rating/Rating.jsx","pages/Tasks/Tasks.jsx","core/components/SideMenu/SideMenu.jsx","core/components/Navbar/Navbar.jsx","routing/RouterRoulet.jsx","App.js","serviceWorker.js","index.js","assets/Колян.png"],"names":["NAVBAR_ACTION_TYPES","NavbarActions","setTitle","createAction","mapReducers","state","action","title","payload","navbarState","reducer","handleActions","actions","URLS","API_URLS","LOAD_STATUSES","TASK_STATUSES","httpClient","axios","create","headers","baseURL","ApiService","getBoard","get","changeTask","task","post","getUsers","BOARD_ACTION_TYPES","BoardActions","setStatus","changeStatusTask","setTasks","setSignalFetch","fetchTasks","withLoadStatus","dispatch","a","response","data","curveSocketTimer","setTimeout","clearTimeout","console","log","initialState","tasks","loadStatus","signal","boardState","reducers","combineReducers","navbar","board","middlewares","composeWithDevTools","applyMiddleware","getState","next","Function","store","createStore","Task","props","useDispatch","classes","cn","status","className","description","onClick","type","btnNextStatusText","danger","icon","DeleteOutlined","TasksList","statusId","statusText","currentTasks","filter","length","map","i","key","NotFound","useState","showKolyan","setShowKolyan","useEffect","timerKolyan","classesKolyan","src","Kolyan","alt","routes","path","component","name","useSelector","MenuItem","route","active","history","useHistory","push","SideMenu","filtredRoutes","pathname","useLocation","Navbar","RouterRoulet","to","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.b1707865.chunk.js","sourcesContent":["import { createAction } from \"redux-actions\";\n\nexport const NAVBAR_ACTION_TYPES = {\n    SET_TITLE: \"NAVBAR.SET_TITLE\"\n}\n\nexport class NavbarActions {\n    static setTitle = createAction(NAVBAR_ACTION_TYPES.SET_TITLE);\n}","import { handleActions } from \"redux-actions\";\nimport { NAVBAR_ACTION_TYPES } from \"./navbar.actions\";\n\nexport const initrialState = {\n    title: ''\n}\n\nconst mapReducers = {\n    [NAVBAR_ACTION_TYPES.SET_TITLE]: (state, action) => ({\n        ...state,\n        title: action.payload\n    })\n}\n\nexport const navbarReducer = handleActions(mapReducers, initrialState);","import { NavbarActions } from \"./navbar.actions\";\nimport { navbarReducer } from \"./navbar.reducers\";\n\nexport const navbarState = {\n    reducer: navbarReducer,\n    actions: NavbarActions\n}","export const URLS = {\n    RATING: '/rating/:id',\n    TASKS: '/tasks',\n    USERS_LIST: '/users_list'\n}\n\nexport const API_URLS = {\n    BASE: 'https://galley-jr6l7s7e6a-uc.a.run.app',\n    BOARD: '/board',\n    TASK_CHANGE: '/task/change',\n    USERS: '/users'\n}\n\nexport const LOAD_STATUSES = {\n    LOADING: 'LOADING',\n    READY: 'READY'\n}\n\nexport const TASK_STATUSES = [\n    \"Готова для разработки\",\n    \"В разработке\",\n    \"Тестирование\",\n    \"Разработка завершена\"\n]\n\nexport const DELAY_BOARD = 10000;","import axios from \"axios\";\nimport { API_URLS } from \"../constants\";\n\nconst headers = {\n    'Content-Type': 'application/json'\n}\n\nexport const httpClient = axios.create({\n    headers,\n    baseURL: API_URLS.BASE\n})","import { httpClient } from \"./httpClient\";\nimport { API_URLS } from \"../constants\";\n\nexport class ApiService {\n    \n    /** Получение доски с тасками */\n    static getBoard = () => {\n        return httpClient.get(API_URLS.BOARD);\n    }\n\n    /** Изменение задачи */\n    static changeTask = (task) => {\n        return httpClient.post(API_URLS.TASK_CHANGE, task);\n    }\n\n    /** Получение гребцов */\n    static getUsers = () => {\n        return httpClient.get(API_URLS.USERS);\n    }\n} ","import { createAction } from \"redux-actions\";\n\nimport { LOAD_STATUSES, DELAY_BOARD } from \"../../shared/constants\";\nimport { ApiService } from \"../../shared/http\";\n\nexport const BOARD_ACTION_TYPES = {\n    SET_STATUS: 'BOARD.SET_STATUS',\n    CHANGE_TASK_STATUS: 'BOARD.CHANGE_TASK_STATUS',\n    SET_TASKS: 'BOARD.SET_TASKS',\n    SET_SIGNAL_FETCH: 'BOARD.SET_SIGNAL_FETCH'\n}\n\nexport class BoardActions {\n    static setStatus = createAction(BOARD_ACTION_TYPES.SET_STATUS);\n    static changeStatusTask = createAction(BOARD_ACTION_TYPES.CHANGE_TASK_STATUS);\n    static setTasks = createAction(BOARD_ACTION_TYPES.SET_TASKS);\n\n    // Необходиом для реализации кривосокета (curve-socket)\n    // На этот параметр будет смотреть компонента \n    // и делать \n    static setSignalFetch = createAction(BOARD_ACTION_TYPES.SET_SIGNAL_FETCH);\n\n    static fetchTasks = (withLoadStatus) => async (dispatch) => {\n        if (withLoadStatus) {\n            dispatch(this.setStatus(LOAD_STATUSES.LOADING));\n        }\n\n        try {\n            const response = await ApiService.getBoard();\n            dispatch(this.setTasks(response.data));\n\n            // Реализация Curve-Socket\n            const curveSocketTimer = setTimeout(() => {\n                dispatch(this.setSignalFetch(true));\n                clearTimeout(curveSocketTimer);\n            }, DELAY_BOARD)\n\n        } catch(error) {\n            // TODO: Доработать обработчик\n            console.log(error);\n        }\n    }\n}","import { handleActions } from \"redux-actions\";\n\nimport { LOAD_STATUSES } from \"../../shared/constants\";\nimport { BOARD_ACTION_TYPES } from \"./board.actions\";\n\nconst initialState = {\n    tasks: [],\n    loadStatus: LOAD_STATUSES.READY,\n    signal: false\n}\n\nconst mapReducers = {\n    [BOARD_ACTION_TYPES.SET_TASKS]: (state, action) => ({\n        ...state,\n        tasks: [...action.payload]\n    }),\n    [BOARD_ACTION_TYPES.SET_STATUS]: (state, action) => ({\n        ...state,\n        loadStatus: action.payload\n    }),\n    [BOARD_ACTION_TYPES.SET_SIGNAL_FETCH]: (state, action) => ({\n        ...state,\n        signal: action.payload\n    }),\n    [BOARD_ACTION_TYPES.CHANGE_TASK_STATUS]: (state, action) => {\n        // TODO: тут необходиом реализовать перемещение таски\n        return {\n            ...state\n        }\n    }\n}\n\nexport const boardReducer = handleActions(mapReducers, initialState);","import { BoardActions } from \"./board.actions\";\nimport { boardReducer } from \"./board.reducer\";\n\nexport const boardState = {\n    reducer: boardReducer,\n    actions: BoardActions\n}","import { combineReducers } from \"redux\";\n\nimport { navbarState } from \"./navbar\";\nimport { boardState } from \"./board\";\n\nexport const reducers = combineReducers({\n    navbar: navbarState.reducer,\n    board: boardState.reducer\n})","import { applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Thunk function\nexport const actionFn = ({ dispatch, getState }) => (next) => (action) => {\n  return action instanceof Function ? action(dispatch, getState) : next(action);\n};\n\nexport const middlewares = composeWithDevTools(applyMiddleware(actionFn));\n","import { createStore } from \"redux\";\n\nimport { reducers } from \"./reducers\";\nimport { middlewares } from \"./middlewares\";\n\nexport const store = createStore(reducers, middlewares);","import React from \"react\";\nimport cn from \"classnames\";\nimport { useDispatch } from \"react-redux\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\n\nimport { Button } from \"antd\";\nimport { ApiService } from \"../../../../shared/http\";\nimport { BoardActions } from \"../../../../store/board/board.actions\";\n\nimport \"./style.scss\";\n\nexport const Task = (props) => {\n    const { task } = props;\n    const dispatch = useDispatch();\n\n    const classes = cn({\n        'task': true,\n    })\n\n    const btnNextStatusText = () => {\n        switch(task.status) {\n            case 0:\n                return \"В разработку\"\n            case 1:\n                return \"В тестрирование\"\n            case 2:\n                return \"Завершить\"\n        }\n    }\n\n    const changeTask = async (status) => {\n        try {\n            await ApiService.changeTask({\n                ...task,\n                status: status\n            })\n\n            dispatch(BoardActions.fetchTasks());\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    \n    const handleClickNext = () => {\n        changeTask(task.status + 1);\n    }\n\n    const handleClickRemove = () => {\n        changeTask(4);\n    }\n\n    return (\n        <div className={classes}>\n            <h3 className=\"task-title\">Тема: {task.title}</h3>\n            <p className=\"task-description\">\n                Описание: {task.description}\n            </p>\n            <div className=\"controls\">\n                <Button \n                    onClick={handleClickNext}\n                    type=\"dashed\"\n                >\n                    {btnNextStatusText()}\n                </Button>\n                <Button \n                    danger\n                    type=\"dashed\"\n                    icon={<DeleteOutlined />} \n                    onClick={handleClickRemove}\n                />\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport { Empty } from \"antd\";\n\nimport \"./style.scss\";\nimport { TASK_STATUSES } from \"../../../../shared/constants\";\nimport { Task } from \"../Task\";\n\nexport const TasksList = (props) => {\n    const { statusId, tasks } = props;\n    const statusText = TASK_STATUSES[statusId];\n    const currentTasks = tasks.filter((task) => task.status === statusId);\n\n    const renderTasks = () => {\n        if (!!currentTasks && !!currentTasks.length) {\n            return (\n                <>\n                    {\n                        currentTasks.map((task, i) => \n                            <Task key={i} task={task} />\n                        )\n                    }\n                </>\n            )\n        }\n\n        return <Empty description={`Нет задач в статусе ${statusText}`}/>\n    }\n\n    return (\n        <div className=\"tasks-list\">\n            <h3 className=\"tasks-list-title\">{statusText}</h3>\n            <div className=\"tasks\">\n                {renderTasks()}\n            </div>\n        </div>\n    )\n}","import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport cn from \"classnames\";\n\nimport \"./style.scss\";\nimport { NavbarActions } from \"../../store/navbar/navbar.actions\";\nimport Kolyan from \"../../assets/Колян.png\";\n\nexport const NotFound = () => {\n    const [showKolyan, setShowKolyan] = useState(false);\n    const dispatch = useDispatch();\n    \n    useEffect(() => {\n        dispatch(NavbarActions.setTitle('Пууустооо...'))\n        const timerKolyan = setTimeout(() => {\n            setShowKolyan(true);\n        }, 100);\n\n        return () => {\n            clearTimeout(timerKolyan);\n        }\n    }, []);\n\n    const classesKolyan = cn({\n        'kolyan': true,\n        'kolyan-show': showKolyan\n    })\n\n    return (\n        <div className=\"not-found\">\n            <h1>\n                Ты куда своим пальцем тычешь?\n            </h1>\n            <img \n                className={classesKolyan} \n                src={Kolyan} \n                alt=\"kolyan\"\n            />\n        </div>\n    )\n}","import { URLS } from \"../shared/constants\";\nimport { Rating, Tasks, Users } from \"../pages\";\n\nexport const routes = [\n    { \n        path: URLS.RATING,\n        component: Rating\n    },\n    {\n        path: URLS.TASKS, \n        name: 'Доска с карточками',\n        component: Tasks\n    },\n    // {\n    //     path: URLS.USERS_LIST, \n    //     name: 'Гребцы',\n    //     component: Users\n    // }\n]","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport \"./style.scss\";\nimport { NavbarActions } from \"../../store/navbar/navbar.actions\";\n\nexport const Rating = () => {\n    const dispatch = useDispatch();\n    \n    useEffect(() => {\n        dispatch(NavbarActions.setTitle('Показатель гребли'))\n    }, []);\n\n    return (\n        <div className=\"rating\">\n            Показатель гребли\n        </div>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport \"./style.scss\";\nimport { LOAD_STATUSES } from \"../../shared/constants\";\nimport { NavbarActions } from \"../../store/navbar/navbar.actions\";\nimport { BoardActions } from \"../../store/board/board.actions\";\nimport { TasksList } from \"./components\"\n\nexport const Tasks = () => {\n    const dispatch = useDispatch();\n    const { tasks, loadStatus, signal } = useSelector((state) => state.board);\n\n    useEffect(() => {\n        dispatch(NavbarActions.setTitle('Доска с карточками'));\n        dispatch(BoardActions.fetchTasks(true));\n    }, []);\n    \n    useEffect(() => {\n        if (signal) {\n            dispatch(BoardActions.fetchTasks());\n            dispatch(BoardActions.setSignalFetch(false));\n        }\n    }, [signal]);\n\n    return (\n        <div className=\"tasks\">\n            {\n                !!tasks && (\n                    <div className=\"tasks-columns\">\n                        <TasksList statusId={0} tasks={tasks} />\n                        <TasksList statusId={1} tasks={tasks} />\n                        <TasksList statusId={2} tasks={tasks} />\n                        <TasksList statusId={3} tasks={tasks} />\n                    </div>\n                )\n            } \n        </div>\n    )\n}","import React from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport cn from \"classnames\";\n\nimport \"./style.scss\";\n\nconst MenuItem = (props) => {\n    const { route, active } = props;\n    const history = useHistory();\n\n    const handleClick = () => {\n        history.push(route.path);\n    }\n\n    const classes = cn({\n        'side-menu-item': true,\n        'side-menu-item-active': active\n    })\n\n    return (\n        <div \n            className={classes}\n            onClick={handleClick}\n        >\n            <span>{route.name}</span>\n        </div>\n    )\n}\n\nexport const SideMenu = (props) => {\n    const { routes } = props;\n    const filtredRoutes = routes.filter((route) => !!route.name);\n    const { pathname } = useLocation();\n\n    return (\n        <div className=\"side-menu\">\n            {\n                filtredRoutes.map((route, i) => \n                    <MenuItem \n                        key={i} \n                        route={route}\n                        active={route.path === pathname} \n                    />\n                )\n            }\n        </div>\n    )\n}","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport \"./style.scss\";\n\nexport const Navbar = () => {\n    const { title } = useSelector((state) => state.navbar);\n\n    return (\n        <div className=\"navbar\">\n            <h1>{title}</h1>\n        </div>\n    )\n}","import React from \"react\";\nimport { \n    HashRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from \"react-router-dom\";\n\nimport \"./style.scss\";\nimport { URLS } from \"../shared/constants\";\nimport { routes } from \"./routes\";\nimport { NotFound } from \"../pages\";\nimport { SideMenu, Navbar } from \"../core/components\";\n\nexport const RouterRoulet = () => {\n    return (\n        <Router>\n            <div className=\"container\">\n                <div className=\"container-side\">\n                    <SideMenu routes={routes} />\n                </div>\n                <div className=\"container-content\">\n                    <Navbar />\n                    <Route path=\"/\">\n                        <Redirect to={URLS.TASKS} />\n                    </Route>\n                    <Switch>\n                        {\n                            routes.map((route, i) => \n                                <Route \n                                    key={i}\n                                    path={route.path}\n                                    component={route.component}\n                                />\n                            )\n                        }\n                        <NotFound />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    )\n}","import 'antd/dist/antd.css';\n\nimport React from 'react';\nimport { Provider } from \"react-redux\";\n\nimport { store } from \"./store\";\nimport { RouterRoulet } from \"./routing\"\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <RouterRoulet />\n      </Provider>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Колян.9cc251b1.png\";"],"sourceRoot":""}