{"version":3,"sources":["assets/Колян.png","store/navbar/navbar.actions.js","store/navbar/navbar.reducers.js","store/navbar/index.js","store/reducers.js","store/middlewares.js","store/index.js","shared/constants/index.js","pages/NotFound/NotFound.jsx","routing/routes.js","pages/Rating/Rating.jsx","pages/Tasks/Tasks.jsx","pages/Users/Users.jsx","core/components/SideMenu/SideMenu.jsx","core/components/Navbar/Navbar.jsx","routing/RouterRoulet.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NAVBAR_ACTION_TYPES","NavbarActions","setTitle","createAction","mapReducers","state","action","title","payload","navbarState","reducer","handleActions","actions","reducers","combineReducers","navbar","middlewares","composeWithDevTools","applyMiddleware","dispatch","getState","next","Function","store","createStore","URLS","NotFound","useState","showKolyan","setShowKolyan","useDispatch","useEffect","timerKolyan","setTimeout","clearTimeout","classesKolyan","cn","className","src","Kolyan","alt","routes","path","component","name","MenuItem","props","route","active","history","useHistory","classes","onClick","push","SideMenu","filtredRoutes","filter","pathname","useLocation","map","i","key","Navbar","useSelector","RouterRoulet","to","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f9ecd8c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Колян.fd0bd9d2.png\";","import { createAction } from \"redux-actions\";\n\nexport const NAVBAR_ACTION_TYPES = {\n    SET_TITLE: \"NAVBAR.SET_TITLE\"\n}\n\nexport class NavbarActions {\n    static setTitle = createAction(NAVBAR_ACTION_TYPES.SET_TITLE);\n}","import { handleActions } from \"redux-actions\";\nimport { NAVBAR_ACTION_TYPES } from \"./navbar.actions\";\n\nexport const initrialState = {\n    title: ''\n}\n\nconst mapReducers = {\n    [NAVBAR_ACTION_TYPES.SET_TITLE]: (state, action) => ({\n        ...state,\n        title: action.payload\n    })\n}\n\nexport const navbarReducer = handleActions(mapReducers, initrialState);","import { NavbarActions } from \"./navbar.actions\";\nimport { navbarReducer } from \"./navbar.reducers\";\n\nexport const navbarState = {\n    reducer: navbarReducer,\n    actions: NavbarActions\n}","import { combineReducers } from \"redux\";\n\nimport { navbarState } from \"./navbar\";\n\nexport const reducers = combineReducers({\n    navbar: navbarState.reducer\n})","import { applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Thunk function\nexport const actionFn = ({ dispatch, getState }) => (next) => (action) => {\n  return action instanceof Function ? action(dispatch, getState) : next(action);\n};\n\nexport const middlewares = composeWithDevTools(applyMiddleware(actionFn));\n","import { createStore } from \"redux\";\n\nimport { reducers } from \"./reducers\";\nimport { middlewares } from \"./middlewares\";\n\nexport const store = createStore(reducers, middlewares);","export const URLS = {\n    RATING: '/rating/:id',\n    TASKS: '/tasks',\n    USERS_LIST: '/users_list'\n}","import React, { useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport cn from \"classnames\";\n\nimport \"./style.scss\";\nimport { NavbarActions } from \"../../store/navbar/navbar.actions\";\nimport Kolyan from \"../../assets/Колян.png\";\n\nexport const NotFound = () => {\n    const [showKolyan, setShowKolyan] = useState(false);\n    const dispatch = useDispatch();\n    \n    useEffect(() => {\n        dispatch(NavbarActions.setTitle('Пууустооо...'))\n        const timerKolyan = setTimeout(() => {\n            setShowKolyan(true);\n        }, 100);\n\n        return () => {\n            clearTimeout(timerKolyan);\n        }\n    }, []);\n\n    const classesKolyan = cn({\n        'kolyan': true,\n        'kolyan-show': showKolyan\n    })\n\n    return (\n        <div className=\"not-found\">\n            <h1>\n                Ты куда своим пальцем тычешь?\n            </h1>\n            <img \n                className={classesKolyan} \n                src={Kolyan} \n                alt=\"kolyan\"\n            />\n        </div>\n    )\n}","import { URLS } from \"../shared/constants\";\nimport { Rating, Tasks, Users } from \"../pages\";\n\nexport const routes = [\n    { \n        path: URLS.RATING,\n        component: Rating\n    },\n    {\n        path: URLS.TASKS, \n        name: 'Доска с карточками',\n        component: Tasks\n    },\n    {\n        path: URLS.USERS_LIST, \n        name: 'Гребцы',\n        component: Users\n    }\n]","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport \"./style.scss\";\nimport { NavbarActions } from \"../../store/navbar/navbar.actions\";\n\nexport const Rating = () => {\n    const dispatch = useDispatch();\n    \n    useEffect(() => {\n        dispatch(NavbarActions.setTitle('Показатель гребли'))\n    }, []);\n\n    return (\n        <div className=\"rating\">\n            Показатель гребли\n        </div>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport \"./style.scss\";\nimport { NavbarActions } from \"../../store/navbar/navbar.actions\";\n\nexport const Tasks = () => {\n    const dispatch = useDispatch();\n    \n    useEffect(() => {\n        dispatch(NavbarActions.setTitle('Доска с карточками'))\n    }, []);\n\n    return (\n        <div className=\"tasks\">\n            Доска с карточками\n        </div>\n    )\n}","import React, { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport \"./style.scss\";\nimport { NavbarActions } from \"../../store/navbar/navbar.actions\";\n\nexport const Users = () => {\n    const dispatch = useDispatch();\n    \n    useEffect(() => {\n        dispatch(NavbarActions.setTitle('Гребцы'))\n    }, []);\n\n    return (\n        <div className=\"users\">\n             Гребцы\n        </div>\n    )\n}","import React from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport cn from \"classnames\";\n\nimport \"./style.scss\";\n\nconst MenuItem = (props) => {\n    const { route, active } = props;\n    const history = useHistory();\n\n    const handleClick = () => {\n        history.push(route.path);\n    }\n\n    const classes = cn({\n        'side-menu-item': true,\n        'side-menu-item-active': active\n    })\n\n    return (\n        <div \n            className={classes}\n            onClick={handleClick}\n        >\n            <span>{route.name}</span>\n        </div>\n    )\n}\n\nexport const SideMenu = (props) => {\n    const { routes } = props;\n    const filtredRoutes = routes.filter((route) => !!route.name);\n    const { pathname } = useLocation();\n\n    return (\n        <div className=\"side-menu\">\n            {\n                filtredRoutes.map((route, i) => \n                    <MenuItem \n                        key={i} \n                        route={route}\n                        active={route.path === pathname} \n                    />\n                )\n            }\n        </div>\n    )\n}","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nimport \"./style.scss\";\n\nexport const Navbar = () => {\n    const { title } = useSelector((state) => state.navbar);\n\n    return (\n        <div className=\"navbar\">\n            <h1>{title}</h1>\n        </div>\n    )\n}","import React from \"react\";\nimport { \n    HashRouter as Router,\n    Switch,\n    Route,\n    Redirect\n} from \"react-router-dom\";\n\nimport \"./style.scss\";\nimport { URLS } from \"../shared/constants\";\nimport { routes } from \"./routes\";\nimport { NotFound } from \"../pages\";\nimport { SideMenu, Navbar } from \"../core/components\";\n\nexport const RouterRoulet = () => {\n    return (\n        <Router>\n            <div className=\"container\">\n                <div className=\"container-side\">\n                    <SideMenu routes={routes} />\n                </div>\n                <div className=\"container-content\">\n                    <Navbar />\n                    <Route path=\"/\">\n                        <Redirect to={URLS.TASKS} />\n                    </Route>\n                    <Switch>\n                        {\n                            routes.map((route, i) => \n                                <Route \n                                    key={i}\n                                    path={route.path}\n                                    component={route.component}\n                                />\n                            )\n                        }\n                        <NotFound />\n                    </Switch>\n                </div>\n            </div>\n        </Router>\n    )\n}","import 'antd/dist/antd.css';\n\nimport React from 'react';\nimport { Provider } from \"react-redux\";\n\nimport { store } from \"./store\";\nimport { RouterRoulet } from \"./routing\"\n\nexport const App = () => {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <RouterRoulet />\n      </Provider>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}